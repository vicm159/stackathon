library(DBI)
library(odbc)
library(caret)
DB <-
dbConnect(odbc(), "PostgreSQL victorfullstack")
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean"))
View(housing)
head(housing)
str(housing)
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean")) %>%
mutate(sqft = str_replace_all(sqft, ",","") %>% as.numeric()) %>%
mutate(beds = as.numeric(beds), baths = as.numeric(baths),
zillowEstimate1 = as.numeric(zillowEstimate1))
View(housing)
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean"))
glimpse(housing)
housing <-
housing %>% mutate(soldPrice = as.numeric(soldPrice))
View(housing)
housing <-
housing %>% mutate(soldPrice = as.numeric(soldPrice),
zillowEstimate1 = as.numeric(zillowEstimate1))
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean"))
housing <-
housing %>% mutate(soldPrice = as.numeric(soldPrice),
zillowEstimate1 = as.numeric(zillowEstimate1))
View(housing)
housingClean <- housing
rm(housing)
View(housingClean)
housingClean$beds[1]
housingClean$beds[1] %>% as.numeric()
str_sub(housingClean$beds[1],2,-1)
str_sub(housingClean$beds[1],2,-1) %>% as.numeric()
map_dfr(housingClean[1:5,],function(row){
print(row)
})
map_dfr(select(housingClean, beds, baths, sqft),function(row){
print(row)
})
str_sub(housingClean$beds,1,1)
str_sub(housingClean$beds[1],1,1)
str_sub(housingClean$beds[1],1,1) == " "
str_sub(housingClean$beds[1],1,1) == ""
str_sub(housingClean$beds[1],2,2)
str_sub(housingClean$beds[1],1,1) %>% as.numeric()
housing <-
dbReadTable(DB, Id(schema="stackathon", name="housingdata")) %>%
as_tibble()
# changing address url to standard address
housing <-
housing %>% mutate(address1 = str_replace(address, "homedetails", "") %>%
str_sub(3, -1))
newAddress <-
map_chr(housing$address1, function(row){
str_sub(row, 1, str_locate(row, "/")[1])
}) %>%
str_replace_all("/","") %>%
str_replace_all("-"," ")
housing$address1 <- newAddress
rm(newAddress)
housing$address1 <- str_to_lower(housing$address1)
housing <-
housing %>% mutate(city = case_when(
str_detect(address1, "arroyo grande") ~ "arroyo grande" ,
str_detect(address1, "paso robles") ~ "paso robles",
str_detect(address1, "san luis obispo") ~ "san luis obispo",
str_detect(address1, "cambria") ~ "cambria",
str_detect(address1, "atascadero") ~ "atascadero",
str_detect(address1, "santa margarita") ~ "santa margarita",
str_detect(address1, "pismo beach") ~ "pismo beach",
str_detect(address1, "nipomo") ~ "nipomo",
str_detect(address1, "morro bay") ~ "morro bay",
str_detect(address1, "avila beach ") ~ "avila beach",
str_detect(address1, "san miguel ca") ~ "san miguel",
str_detect(address1, "los osos ca") ~ "los osos",
str_detect(address1, "grover beach ca") ~ "grover beach",
str_detect(address1, "cayucos ca") ~ "cayucos",
str_detect(address1, "oceano ca") ~ "oceano",
str_detect(address1, "san simeon ca") ~ "san simeon",
str_detect(address1, "templeton ca") ~ "templeton",
str_detect(address1, "shell beach ca") ~ "shell beach",
str_detect(address1, "bradley ca") ~ "bradley",
str_detect(address1, "heritage ranch ca") ~ "heritage ranch",
str_detect(address1, "shandon") ~ "shandon"
)
)
housing <-
housing %>% mutate(soldPrice1 = str_replace(soldPrice," Sold:","")) %>%
mutate(soldPrice1 = str_replace(soldPrice1, "\\$","") %>% str_replace_all(",",""))
housing <-
housing %>% mutate(dateSold1 = str_replace(dateSold, "Sold on ",""))
View(housing)
as.numeric(str_sub(housingClean$beds[1],1,1))
as.numeric(str_sub(housingClean$beds[1],1,1)) == NA
typeof(as.numeric(str_sub(housingClean$beds[1],1,1)))
is.na(as.numeric(str_sub(housingClean$beds[1],1,1)))
homeDetails <-
map_dfr(housing$homeDetails, function(row){
output <- data_frame(beds = "", baths = "", sqft ="")
singlebath <- FALSE
singlebed <- FALSE
beds_remove <- str_sub(row, str_locate(row, "beds")[[1]],-1)
if(is.na(beds_remove)){
beds_remove <- str_sub(row, str_locate(row, "bed")[[1]],-1)
singlebed <- TRUE
}
beds <- str_remove(row, beds_remove) %>% str_remove_all(" ")
# for some reason cannot get rid of beginning empty space so have to do this
if(is.na(as.numeric(str_sub(beds, 1,1)))){
beds <- str_sub(beds, 2,-1) %>% as.numeric()
}
output$beds <- beds
if(singlebed){
beds_remove <- str_remove(beds_remove, "bed")
}
beds_remove <- str_remove(beds_remove, "beds")
baths_remove <- str_sub(beds_remove, str_locate(beds_remove, "baths")[[1]],-1)
if(is.na(baths_remove)){
baths_remove <- str_sub(beds_remove, str_locate(beds_remove, "bath")[[1]],-1)
singlebath <- TRUE
}
baths <- str_remove(beds_remove, baths_remove)
if(is.na(as.numeric(str_sub(baths,1,1)))){
baths <- str_sub(baths,2,-1) %>% as.numeric()
}
output$baths <- baths
if(singlebath){
baths_remove <- str_remove(baths_remove, "bath")
}
baths_remove <- str_remove(baths_remove, "baths")
sqft_remove <- str_sub(baths_remove, str_locate(baths_remove, "sqft")[[1]],-1)
sqft <- str_remove(baths_remove, sqft_remove)
if(str_detect(row, "sqft") && is.na(sqft)){
sqft <- str_remove(row, "sqft")
}
sqft <- str_remove_all(sqft, "\\,")
if(is.na(as.numeric(str_sub(sqft, 1,1)))){
sqft <- str_sub(sqft, 2,-1) %>% as.numeric()
}
output$sqft <- sqft
return(output)
})
warnings()
View(housing)
homeDetails <-
map_dfr(housing$homeDetails, function(row){
output <- data_frame(beds = "", baths = "", sqft ="")
singlebath <- FALSE
singlebed <- FALSE
beds_remove <- str_sub(row, str_locate(row, "beds")[[1]],-1)
if(is.na(beds_remove)){
beds_remove <- str_sub(row, str_locate(row, "bed")[[1]],-1)
singlebed <- TRUE
}
beds <- str_remove(row, beds_remove) %>% str_remove_all(" ")
# for some reason cannot get rid of beginning empty space so have to do this
if(is.na(as.numeric(str_sub(beds, 1,1)))){
beds <- str_sub(beds, 2,-1)
}
output$beds <- beds
if(singlebed){
beds_remove <- str_remove(beds_remove, "bed")
}
beds_remove <- str_remove(beds_remove, "beds")
baths_remove <- str_sub(beds_remove, str_locate(beds_remove, "baths")[[1]],-1)
if(is.na(baths_remove)){
baths_remove <- str_sub(beds_remove, str_locate(beds_remove, "bath")[[1]],-1)
singlebath <- TRUE
}
baths <- str_remove(beds_remove, baths_remove)
if(is.na(as.numeric(str_sub(baths,1,1)))){
baths <- str_sub(baths,2,-1)
}
output$baths <- baths
if(singlebath){
baths_remove <- str_remove(baths_remove, "bath")
}
baths_remove <- str_remove(baths_remove, "baths")
sqft_remove <- str_sub(baths_remove, str_locate(baths_remove, "sqft")[[1]],-1)
sqft <- str_remove(baths_remove, sqft_remove)
if(str_detect(row, "sqft") && is.na(sqft)){
sqft <- str_remove(row, "sqft")
}
sqft <- str_remove_all(sqft, "\\,")
if(is.na(as.numeric(str_sub(sqft, 1,1)))){
sqft <- str_sub(sqft, 2,-1)
}
output$sqft <- sqft
return(output)
})
View(homeDetails)
housing <-
cbind(housing, homeDetails)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
rm(homeDetails)
zillowEst <-
str_replace_all(housing$zillowEstimate, "[^1234567890]","")
View(housing)
housing$beds[1]
housing$beds[1:5]
housing$beds %>% as.numeric()
housing$baths %>% as.numeric()
housing$sqft %>% as.numeric()
housing <-
housing %>% mutate(beds = as.numeric(beds), baths = as.numeric(baths),
sqft = as.numeric(sqft))
View(housing)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
select(housing, homeDetails, beds, baths, sqft) %>% sample_n(10)
zillowEst <-
str_replace_all(housing$zillowEstimate, "[^1234567890]","")
housingClean <-
select(housing, zillowEstimate, OnMarket, soldPrice1, dateSold1, city, beds, baths, sqft,
address1) %>%
cbind(data_frame(zillowEstimate1 = zillowEst))
housingClean <-
mutate(housingClean, dateSold1 = mdy(dateSold1))
library(lubridate)
housingClean <-
mutate(housingClean, dateSold1 = mdy(dateSold1))
View(housingClean)
glimpse(housingClean)
housingClean <-
housingClean %>% mutate(soldPrice = as.numeric(soldPrice),
zillowEstimate1 = as.numeric(zillowEstimate1))
View(housingClean)
housingClean <-
housingClean %>% mutate(soldPrice1 = as.numeric(soldPrice1),
zillowEstimate1 = as.numeric(zillowEstimate1))
View(housingClean)
housing$address[586]
housing$address[190]
View(housingClean)
cbind(housing[,c("soldPrice")], housingClean[,c("soldPrice1")]) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
select(housing, soldPrice) %>% cbind(select(housingClean, soldPrice1)) %>% sample_n(10)
View(housingClean)
dbWriteTable(DB, Id(schema = "stackathon", name = "housingclean"), housingClean,
overwrite = TRUE)
rm(housing, housingClean)
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean"))
View(housing)
glimpse(housing)
rm(zillowEst)
ggplot(housing, aes(x = sqft, y = soldPrice1)) +
geom_point()
cor(housing$sqft, housing$soldPrice1)
?cor
cor(housing$sqft, housing$soldPrice1, na.rm = TRUE)
cor(housing$soldPrice1, housing$sqft, method = "pearson")
cor(housing$soldPrice1, housing$sqft, method = "kendall")
cor(housing$soldPrice1, housing$sqft, method = "spearman")
cor(housing$soldPrice1, housing$sqft, use = "complete.obs")
cor(housing$soldPrice1, housing$beds, use = "complete.obs")
cor(housing$soldPrice1, housing$baths, use = "complete.obs")
qplot(soldPrice1, beds, data = housing)
qplot(soldPrice1, baths, data = housing)
?qplot
qplot(soldPrice1/1000, baths, data = housing, main = "price and baths")
qplot(baths, soldPrice1/1000, data = housing, xlab = "price in thousands", main = "price and baths")
qplot(baths, soldPrice1/1000, data = housing, ylab = "price in thousands", main = "price and baths")
qplot(beds, soldPrice1/1000, data = housing, ylab = "price in thousands", main = "price and beds")
qplot(sqft, soldPrice1/1000, data = housing, ylap = "price in thousands", main = "price and sqft")
View(housing)
qplot(baths, zillowEstimate1, data = housing, ylab = "price in thousands", main = "zillow estimate and baths")
qplot(baths, zillowEstimate1/1000, data = housing, ylab = "price in thousands", main = "zillow estimate and baths")
qplot(beds, zillowEstimate/1000, data = housing, ylab = "price in thousands", main = "zillow and beds")
qplot(beds, zillowEstimate1/1000, data = housing, ylab = "price in thousands", main = "zillow and beds")
qplot(sqft, zillowEstimate1/1000, data = housing, ylap = "price in thousands", main = "zillow and sqft")
with(housing, cor(baths, zillowEstimate1, use = "complete.obs"))
with(housing, cor(beds, zillowEstimate1, use = "complete.obs"))
with(housing, cor(sqft, zillowEstimate1, use = "complete.obs"))
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft, data = housing)
summary(lm_first)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + city, data = housing)
summary(lm_first)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)), data = housing)
summary(lm_first)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)) + city, data = housing)
summary(lm_first)
plot(lm_first)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)), data = housing)
plot(lm_first)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)) + city, data = housing)
View(housing)
test <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city)
lm_predict <-
predict(lm_first, test)
View(test)
View(cbind(test, data.frame(test = lm_predict)))
ggplot(filter(housing, OnMarket == 1), aes(x = zillowEstimate1, y = lm_predict)) +
geom_point()
filter(housing, OnMarket == 1) %>% nrow()
ggplot(filter(housing, OnMarket == 1), aes(x = 1:446, y = zillowEstimate1 -lm_predict)) +
geom_point()
ggplot(filter(housing, OnMarket == 1), aes(x = 1:446, y = zillowEstimate1)) +
geom_point() +
geom_point(aes(y = lm_predict), colour = "red")
dbDisconnect(DB)
ggplot(filter(housing, OnMarket == 1), aes(x = 1:446, y = zillowEstimate1)) +
geom_line() +
geom_line(aes(y = lm_predict), colour = "red")
cor(lm_predict, filter(housing, OnMarket==1)$zillowEstimate1, use ="complete.ops")
?cor
View(housing)
filter(housing, OnMarket==1)$zillowEstimate1
cor(filter(housing, OnMarket==1)$zillowEstimate1, lm_predict, use = "complete.obs")
lm
lm_first
summary(lm_first)
onMarketTest <-
filter(housing, OnMarket == 0)
lm_predict_onMarket <-
predict(lm_first, onMarketTest)
View(onMarketTest)
View(test)
View(onMarketTest)
onMarketTest <-
filter(housing, OnMarket == 1)
lm_predict_onMarket <-
predict(lm_first, onMarketTest)
onMarketTest <-
filter(housing, OnMarket == 0)
lm_predict_onMarket <-
predict(lm_first, onMarketTest)
View(housing)
test <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city, address1)
lm_predict <-
predict(lm_first, test)
onMarketTest <-
filter(housing, OnMarket == 0)
lm_predict_onMarket <-
predict(lm_first, onMarketTest)
View(test)
test$lm_predict <- lm_predict
View(test)
glimpse(housing)
View(onMarketTest)
View(housing)
DB
DB <-
dbConnect(odbc(), "PostgreSQL victorfullstack")
housingURL <-
dbReadTable(DB, Id(schema = "stackathon", name = "housingdata"))
View(housingURL)
housing$url <- housingURL$address
train_data <-
housing %>% filter(OnMarket == 0) %>%
select(soldPrice1, beds, baths, sqft, city, zillowEstimate1)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)) + city,
data = train_data)
summary(lm_first)
plot(lm_first)
test_data <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city, address1, address)
test_data <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city, address1, url)
View(test_data)
lm_predict <-
predict(lm_first, test_data)
test_data$lm_predict <- lm_predict
View(test_data)
View(test_data)
View(train_data)
View(housing)
test_data <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city, address1, url, zillowEstimate1)
lm_predict <-
predict(lm_first, test_data)
test_data$lm_predict <- lm_predict
View(test_data)
View(test_data)
dbWriteTable(DB, Id(schema = "stackathon", name = "lmPrediction"),
test_data)
dbDisconnect(DB)
odbcListDataSources()
DB <-
dbConnect(odbc(), "PostgreSQL victorfullstack")
housing <-
dbGetQuery(DB, "select * from stackathon.\"lmPrediction\"")
View(housing)
dbDisconnect(DB)
r <- plumber::plumb("/Users/victormarta1/Documents/FS_LibraryRepo/Stackathon/webApp/R/plumber.R")
r$run(host="0.0.0.0", port=8082)
r$run(host="0.0.0.0", port=8081)
r$run(host="0.0.0.0", port=8081)
DB
DB <-
dbConnect(odbc(), "PostgreSQL victorfullstack")
housing <-
dbReadTable(DB, Id(schema = "stackathon", name ="housingclean"))
housingURL <-
dbReadTable(DB, Id(schema = "stackathon", name = "housingdata"))
housing$url <- housingURL$address
train_data <-
housing %>% filter(OnMarket == 0) %>%
select(soldPrice1, beds, baths, sqft, city, zillowEstimate1)
View(train_data)
View(housing)
lm_first <-
lm(soldPrice1 ~ beds + baths + sqft + I(sqrt(sqft)) + city,
data = train_data)
summary(lm_first)
test_data <-
filter(housing, OnMarket == 1) %>%
select(beds, baths, sqft, city, address1, url, zillowEstimate1)
View(test_data)
test_data$url[7]
test_data$url[80]
test_data$url[90]
View(filter(housing, OnMarket==1))
r$run(host="0.0.0.0", port=8081)
View(housing)
duplicated(housing$address1)
r$run(host="0.0.0.0", port=8081)
qplot(baths, soldPrice1/1000, data = housing, ylab = "price in thousands", main = "price and baths")
qplot(beds, soldPrice1/1000, data = housing, ylab = "price in thousands", main = "price and beds")
qplot(sqft, soldPrice1/1000, data = housing, ylap = "price in thousands", main = "price and sqft")
qplot(baths, zillowEstimate1/1000, data = housing, ylab = "price in thousands", main = "zillow estimate and baths")
qplot(beds, zillowEstimate1/1000, data = housing, ylab = "price in thousands", main = "zillow and beds")
qplot(sqft, zillowEstimate1/1000, data = housing, ylap = "price in thousands", main = "zillow and sqft")
r$run(host="0.0.0.0", port=8081)
View(housing)
unique(housing$city)
housing <-
dbGetQuery(DB, "select * from stackathon.\"lmPrediction\"")
View(housing)
View(train_data)
View(train_data)
?separate
?gather
k_trainData <-
separate(train_data, city)
k_trainData <-
separate(train_data, city, into = unique(housing$city))
View(k_trainData)
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
housing <-
dbGetQuery(DB, "select * from stackathon.\"lmPrediction\"")
View(housing)
names(housing)
housing %>%
ggplot(aes(x = lm_predict, y = zillowEstimate1)) +
geom_point()
housing %>%
ggplot(aes(x = lm_predict, y = zillowEstimate1)) +
geom_point() + labs(x = "Linear Model Prediction", y = "Zillow Estimate")
housing %>%
ggplot(aes(x = lm_predict, y = zillowEstimate1)) +
geom_point() + labs(x = "Linear Model Prediction", y = "Zillow Estimate") +
labs(title = "Zillow vs my Prediction vs (eventually) your Guess")
housing %>%
ggplot(aes(x = lm_predict/1000, y = zillowEstimate1/1000)) +
geom_point() + labs(x = "Linear Model Prediction", y = "Zillow Estimate") +
labs(title = "Zillow vs my Prediction vs (eventually) your Guess")
housing %>%
ggplot(aes(x = lm_predict/1000, y = zillowEstimate1/1000)) +
geom_point() + labs(x = "Linear Model Prediction in thousands", y = "Zillow Estimate in thousands") +
labs(title = "Zillow vs my Prediction vs (eventually) your Guess")
r$run(host="0.0.0.0", port=8081)
r <- plumber::plumb("/Users/victormarta1/Documents/FS_LibraryRepo/Stackathon/webApp/R/plumber.R")
r <- plumber::plumb("/Users/victormarta1/Documents/FS_LibraryRepo/Stackathon/webApp/R/plumber.R")
r$run(host="0.0.0.0", port=8081)
r$run(host="0.0.0.0", port=8081)
r$run(host="0.0.0.0", port=8081)
dbDisconnect(DB)
